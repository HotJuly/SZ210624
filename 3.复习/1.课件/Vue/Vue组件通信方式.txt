1.props
	适用场景:父传子,子传父
	父传子:
		1.在父组件中找到子组件标签,并给子组件标签添加标签属性
		2.子组件通过配置对象的props属性,声明想要接收的标签属性值

	子传父:
		1.在父组件中找到子组件标签,并给子组件标签添加标签属性
			注意:属性值应该是个函数(这个函数必须声明在父组件的methods)
		2.子组件通过配置对象的props属性,声明想要接收的标签属性值
		3.子组件调用父组件传递的函数,并向内部传入参数


2.provide/inject
	使用场景:祖孙通信
	流程:
		1.祖先组件在配置对象中添加provide属性,属性值为对象
			在对象中传入需要传递的数据
		2.后代组件在配置对象中添加inject属性,属性值为数组
			在数组中填写需要接收的属性名称

		注意:
			1.如果同时存在多个provide暴露数据
				那么,inject会查找最近的一个provide,如果其中没有想要的数据,会继续向上查找
			2.默认情况下provide和inject的数据不是响应式数据
				如果需要变成响应式,可以配合Vue.observable实现

3.自定义事件

	$on->给某个组件实例绑定自定义事件
	$off->将自定义事件解绑
	$once->绑定自定义事件,但是触发一次之后会立马解绑
	$emit->用于触发某个组件实例的自定义事件


	v-model(双向数据绑定)
		1.将v-model用在input框上
			-将data中的数据作为input的默认值显示在input框中
    				<input type="text" :value="msg">

			-当用户修改input框的内容时,会同步修改data中对应的属性
    				<input type="text" :value="msg" @input="event=>msg=event.target.value">

		2.将v-model用在组件身上
			-将data中的数据作为组件的标签属性进行传递(属性名称默认为value)
    				<A  :value="msg">

			-父组件会给子组件绑定自定义事件,方便子组件后续修改父组件状态(事件名称默认为input)
    				<HelloWorld :value="msg" @input="data=>msg=data" />

			注意:默认属性名和事件名都可以通过model配置进行修改


	.sync修饰符
			-将data中的数据作为组件的标签属性进行传递(属性名称自定义)
    				<A :msg="msg" />

			-父组件会给子组件绑定自定义事件,方便子组件后续修改父组件状态(事件名称默认为update:"属性名")
    				<A :msg="msg" @update:msg="data=>msg=data"/>

			注意:Vue3中v-model和.sync合并为一个,语法使用v-model,但是实际上还是.sync


	全局事件总线(事件中心)
			1.给Vue原型对象添加全局事件总线对象$bus
				Vue.prototype.$bus = new Vue();
			2.想要接收数据的组件,绑定自定义事件
				this.$bus.$on('事件名',事件回调函数)
			3.需要传递数据的组件,触发自定义事件
				this.$bus.$emit('事件名',需要发送的数据)

			注意:
				1.订阅者和发布者必须同时存在
				2.订阅操作必须在发布之前
	

4.找到对应组件的实例对象
	$parent->可以找到父组件的实例对象(vm),他能使用的数据都能给你
	$root->可以找到根组件的实例对象(vm)
	$children->可以找到子组件实例组成的数组
		1.该数组中实例对象的排列顺序不代表页面的组件显示顺序
		2.操作该数组的排列顺序不会影响到页面上的显示顺序
	$refs
		1.给原生html标签添加ref属性
			可以获取到对应标签的真实DOM
		2.给组件标签添加ref属性
			可以获取到对应组件的组件实例对象

5.$attrs,$listeners
	$attrs
		他就像是垃圾桶,专门收集props没有接收的标签属性数据
	$listeners
		他用于收集当前组件绑定的所有自定义事件
	
		
			
